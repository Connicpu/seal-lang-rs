//! This is an example seal program!
//! And you are reading a doc comment for the module ;)

extern mod std; // loaded externally from some include path

mod foo {
    use std.rand;

    type Person;

    impl Person {
        fn create(name)? {
            return new_object Person {
                name,
                has_flown: false,
                can_fly: rand.bernoulli(0.5),
            };
        }

        fn fly(self)? {
            if self.can_fly {
                self.has_flown = true;
            } else {
                throw "You aren't allowed to fly!";
            }
        }
    }
}

fn bar() {
    return 1, 2, 3;
}

fn sum(iter) {
    use std.Iterator;
    use std.IntoIterator;

    if iter impls IntoIterator {
        sum = iter.into_iter();
    }

    if iter impls Iterator {
        let sum = 0;
        for x in iter {
            sum += x;
        }
        return sum;
    } else {
        panic("sum can only be called on iterators");
    }
}

fn main() {
    let result;
    
    let me = foo.Person.create("me").expect("I exist");
    result = me.fly();
    
    if result.err != nil {
        print("I'm sad");
    } else if dont_care_about_flying() {
        print("meh");
    } else {
        print("I can fly!");
    }

    let stuff = [1, 2, 3];
    let things = -me.foo() + 6;
    let _ = me[1 + 2 * 3];

    let a, b, c = bar();
    stuff[0], stuff[1], stuff[2] = bar();

    for i in 0..10 {
        print(i);
    }

    for i in 1...100 {
        if i % 15 == 0 {
            print("FizzBuzz");
        } else if i % 3 == 0 {
            print("Fizz");
        } else if i % 5 == 0 {
            print("Buzz");
        } else {
            print(i);
        }
    }
}
