type IterMap;

trait Iterator {
    fn next(self);
}

impl Iterator {
    fn nth(self, n) {
        let i = 0;
        for value in self {
            if i == n {
                return value;
            }

            i += 1;
        }
    }

    fn map(self, functor) {
        return new_object IterMap {
            inner: self,
            functor,
        };
    }
}

impl Iterator for IterMap {
    fn next(self) {
        let next = self.inner.next();
        if next != nil {
            return self.functor(next);
        }
    }
}

trait IntoIterator {
    fn into_iter(self);
}
